import type { IGroupTextContext } from "../types/context";
import { GrammyError } from "grammy";
import { active } from "../data/active";
import cacheManager from "../cache/cache";
import getUserId from "../utils/getUserId";
import isChatOwner from "../utils/isChatOwner";

async function removeFromChatCleanup(ctx: IGroupTextContext): Promise<void> {
  const chat_id = ctx.chat.id;
  if (!(await isChatOwner(chat_id, ctx.from.id))) return;

  if ((ctx.msg.text || ctx.msg.caption) === "!—Ä–µ—Å—Ç") {
    return void (await ctx
      .reply(
        'üõè <b>!—Ä–µ—Å—Ç</b>: –∑–∞—Ö–∏—Å—Ç–∏—Ç–∏ –ª—é–¥–∏–Ω—É –≤—ñ–¥ —á–∏—Å—Ç–∫–∏ (–∑–∞ —ñ–º\'—è–º, —é–∑–µ—Ä–Ω–µ–π–º–æ–º –∞–±–æ —É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è).\n\n–Ø–∫—â–æ –≤–∏–∫–ª–∏–∫–∞—Ç–∏ –∫–æ–º–∞–Ω–¥—É –¥–æ —á–∏—Å—Ç–∫–∏, —Ç–æ–¥—ñ –±–æ—Ç —Å–ø—Ä–æ–±—É—î –∑—Ä–æ–±–∏—Ç–∏ –ª—é–¥–∏–Ω—É –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –±–µ–∑ –ø—Ä–∞–≤ —Ç–∞ –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ —ó–π –ø—ñ–¥–ø–∏—Å "—Ä–µ—Å—Ç".\n–Ø–∫—â–æ –≤–∏–∫–ª–∏–∫–∞—Ç–∏ –∫–æ–º–∞–Ω–¥—É –ø—ñ—Å–ª—è –∫–æ–º–∞–Ω–¥–∏ !—á–∏—Å—Ç–∫–∞, —Ç–æ–¥—ñ –±–æ—Ç –≤–∏–¥–∞–ª–∏—Ç—å –ª—é–¥–∏–Ω—É –∑—ñ —Å–ø–∏—Å–∫—É.'
      )
      .catch((e) => {}));
  }

  const cacheKey = `cleanup_${chat_id}`;
  let targetMembers = cacheManager.TTLCache.get(cacheKey) as { user_id: number }[] | undefined;

  let targetId =
    ctx.msg.reply_to_message?.from?.id ||
    getUserId((ctx.msg.text ?? ctx.msg.caption).slice(6), chat_id);
  if (targetId === -1) {
    if (targetMembers) {
      cacheManager.TTLCache.set(`cleanup_${chat_id}`, targetMembers, 60 * 5);
    }
    return void (await ctx.reply("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ").catch((e) => {}));
  }

  if (!targetMembers) {
    // Try to promote target as an empty admin with with "—Ä–µ—Å—Ç" role
    switch (await setRestStatus(ctx, targetId)) {
      case "not enough rights set admin":
        return void (await ctx.reply(
          `–ë–æ—Ç –Ω–µ –º–∞—î –¥–æ–∑–≤–æ–ª—É –ø—Ä–∏–∑–Ω–∞—á–∞—Ç–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤.\n–í–∏–¥–∞–π—Ç–µ –¥–æ–∑–≤—ñ–ª –∞–±–æ —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ—é –ø—ñ–¥ —á–∞—Å —á–∏—Å—Ç–∫–∏.`
        ));

      case "not enough rights edit admin":
        return void (await ctx.reply(
          `${active.data[chat_id]?.[targetId]?.name} –∞–¥–º—ñ–Ω, –≤—ñ–Ω –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –≤–∏–¥–∞–ª–µ–Ω–∏–π –ø—ñ–¥ —á–∞—Å —á–∏—Å—Ç–∫–∏ —Ç–∞ –Ω–µ –ø–æ—Ç—Ä–µ–±—É—î —Ä–µ—Å—Ç—É.`
        ));

      case "success":
        return void (await ctx.reply(
          `‚úÖ ${active.data[chat_id]?.[targetId]?.name} –ø–æ–º—ñ—á–µ–Ω–æ —è–∫ —Ä–µ—Å—Ç.`
        ));

      default:
        console.error("Unexpected setRestStatus output!");
        return;
    }
  }

  // Try to remove target from target members for the cleanup
  const startLength = targetMembers.length;
  targetMembers = targetMembers.filter((m) => m.user_id === targetId);
  if (targetMembers.length < startLength) {
    cacheManager.TTLCache.set(cacheKey, targetMembers, 5 * 60);
    return void (await ctx
      .reply(`‚úÖ ${active.data[chat_id]?.[targetId]?.name} —É—Å–ø—ñ—à–Ω–æ –≤–∏–∫–ª—é—á–µ–Ω–æ –∑ —á–∏—Å—Ç–∫–∏.`)
      .catch((e) => {}));
  }

  cacheManager.TTLCache.set(`cleanup_${chat_id}`, targetMembers, 60 * 5);
  return void (await ctx
    .reply("ü§∑üèª‚Äç‚ôÄÔ∏è –°—Ö–æ–∂–µ, —â–æ —Ü—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ–º–∞—î –≤ –ø–æ—Ç–æ—á–Ω—ñ–π —á–∏—Å—Ç—Ü—ñ.")
    .catch((e) => {}));
}

async function setRestStatus(
  ctx: IGroupTextContext,
  targetId: number
): Promise<"not enough rights set admin" | "not enough rights edit admin" | "success"> {
  try {
    await ctx.promoteChatMember(targetId, { can_manage_chat: true });
  } catch (e) {
    if (e instanceof GrammyError && e.description.includes("not enough rights")) {
      return "not enough rights set admin" as const;
    }
  }

  try {
    await ctx.setChatAdministratorCustomTitle(targetId, "—Ä–µ—Å—Ç");
  } catch (e: any) {
    console.log(e.description);
    return "not enough rights edit admin";
  }

  return "success" as const;
}

export default removeFromChatCleanup;
