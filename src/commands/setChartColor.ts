import { IGroupHearsContext } from "../types/context.js";
import parseCmdArgs from "../utils/parseCmdArgs.js";
import { isPremium } from "../utils/isPremium.js";
import { hexToRGB } from "../utils/hexToRGB.js";
import cacheManager from "../cache/cache.js";
import { Database } from "../db/db.js";

const targets = {
    line: ["–≥—Ä–∞—Ñ—ñ–∫", "–ª—ñ–Ω—ñ—è"],
    font: ["—à—Ä–∏—Ñ—Ç", "—Ç–µ–∫—Å—Ç"],
};

const types = {
    personal: ["—è"],
    chat: ["—á–∞—Ç"],
};

// TODO: UI color picker
async function setChartColor(ctx: IGroupHearsContext) {
    const args = parseCmdArgs(ctx.msg.text ?? ctx.msg.caption);
    const target = resolveTarget(args[1]?.toLowerCase());
    const type = resolveType(args[2]?.toLowerCase());
    let hex = args[3];
    const rgb = hexToRGB(hex);

    // Command error checks
    if (!target) {
        void ctx
            .reply(
                '–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–æ –≤–∫–∞–∑–∞–Ω–æ —Ü—ñ–ª—å. –î–æ—Å—Ç—É–ø–Ω—ñ: –≥—Ä–∞—Ñ—ñ–∫ / –ª—ñ–Ω—ñ—è —Ç–∞ —à—Ä–∏—Ñ—Ç / —Ç–µ–∫—Å—Ç.\n–ü—Ä–∏–∫–ª–∞–¥: —Å—Ç–∞—Ç–∞ –∫–æ–ª—ñ—Ä <u>–≥—Ä–∞—Ñ—ñ–∫</u> —è <a href="https://g.co/kgs/5UEQqFv">#066666</a>'
            )
            .catch((e) => {});
        return;
    }

    if (!type) {
        void ctx
            .reply(
                '–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–æ –≤–∫–∞–∑–∞–Ω–æ —Ç–∏–ø. –î–æ—Å—Ç—É–ø–Ω—ñ: —á–∞—Ç / —è.\n–ü—Ä–∏–∫–ª–∞–¥: —Å—Ç–∞—Ç–∞ –∫–æ–ª—ñ—Ä –≥—Ä–∞—Ñ—ñ–∫ <u>—è</u> <a href="https://g.co/kgs/5UEQqFv">#066666</a>'
            )
            .catch((e) => {});
        return;
    }

    if (!rgb || !hex) {
        void ctx
            .reply(
                '–ö–æ–ª—ñ—Ä –º–∞—î –±—É—Ç–∏ –≤ —Ñ–æ—Ä–º–∞—Ç—ñ <a href="https://g.co/kgs/5UEQqFv">HEX</a>\n–ü—Ä–∏–∫–ª–∞–¥: —Å—Ç–∞—Ç–∞ –∫–æ–ª—ñ—Ä <u>–≥—Ä–∞—Ñ—ñ–∫</u> —è <u>#066666</u>'
            )
            .catch((e) => {});
        return;
    }

    // Donate status check
    if (type === "chat") {
        if (!(await isPremium(ctx.chat.id))) {
            ctx.reply("–¶—è —Ñ—É–Ω–∫—Ü—ñ—è –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏—à–µ –¥–æ–Ω–∞—Ç —á–∞—Ç–∞–º.\n–°–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ—é /donate –≤ –ø–æ—Ç—Ä—ñ–±–Ω–æ–º—É —á–∞—Ç—ñ.").catch(
                (e) => {}
            );
            return;
        }
    } else {
        if (!(await isPremium(ctx.from.id))) {
            ctx.reply(
                "–¶—è —Ñ—É–Ω–∫—Ü—ñ—è –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏—à–µ –¥–æ–Ω–∞—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º.\n–°–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ—é /donate –≤ –¥—ñ–∞–ª–æ–∑—ñ –∑ –±–æ—Ç–æ–º."
            ).catch((e) => {});

            return;
        }
    }

    // Cutoff # character
    if (hex.length === 7) {
        hex = hex.slice(1);
    }

    const settings = {
        ...(type === "personal"
            ? await Database.userSettings.get(ctx.from.id)
            : await Database.chatSettings.get(ctx.from.id)),
    };

    if (target === "line") {
        Object.assign(settings, { line_color: hex });
    } else {
        Object.assign(settings, { font_color: hex });
    }

    if (type === "chat") {
        await Database.chatSettings.set(ctx.chat.id, settings);
        cacheManager.ChartCache_Chat.removeChat(ctx.chat.id);
    } else {
        await Database.userSettings.set(ctx.from.id, settings);
        cacheManager.ChartCache_User.removeUser(ctx.from.id);
    }

    await ctx.react("üíÖ").catch(async (e) => {
        await ctx.reply("üíÖ –ö–æ–ª—ñ—Ä —É—Å–ø—ñ—à–Ω–æ –∑–º—ñ–Ω–µ–Ω–æ!").catch((e) => {});
    });
}

function resolveType(raw_type: string | undefined) {
    if (types.personal.includes(raw_type as any)) {
        return "personal" as const;
    }

    if (types.chat.includes(raw_type as any)) {
        return "chat" as const;
    }

    return undefined;
}

function resolveTarget(raw_target: string | undefined) {
    if (targets.line.includes(raw_target as any)) {
        return "line" as const;
    }

    if (targets.font.includes(raw_target as any)) {
        return "font" as const;
    }

    return undefined;
}

export { setChartColor };
