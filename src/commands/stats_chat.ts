import type { IGroupTextContext } from "../types/context";
const Big = require("big-js");
import dbStats from "../db/stats";
import { botStatsManager } from "./botStats";
import { getStatsRatingPlusToday } from "../utils/getStatsRating";

const cmdToDateRangeMap = {
  —Å—å–æ–≥–æ–¥–Ω—ñ: "today",
  –≤—á–æ—Ä–∞: "yesterday",
  —Ç–∏–∂–¥–µ–Ω—å: "weekRange",
  –º—ñ—Å—è—Ü—å: "monthRange",
  —Ä—ñ–∫: "yearRange",
  –≤—Å—è: "all",
  undefined: "today",
} as const;

async function stats_chat(ctx: IGroupTextContext): Promise<void> {
  const rawCmdDateRange = ((ctx.msg.text ?? ctx.msg.caption).split(" ")[1] ??
    "—Å—å–æ–≥–æ–¥–Ω—ñ") as keyof typeof cmdToDateRangeMap;
  const dateRange = cmdToDateRangeMap[rawCmdDateRange];

  const start = String(process.hrtime.bigint());
  const stats = await dbStats.chat.inRage(ctx.chat.id, dateRange);
  const queryTime = String(process.hrtime.bigint());

  const msg =
    `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç—É –∑–∞ ${dateRange === "all" ? "–≤–µ—Å—å —á–∞—Å" : rawCmdDateRange}:\n\n` +
    getStatsRatingPlusToday(stats, ctx.chat.id);
  const msgTime = String(process.hrtime.bigint());

  await ctx.reply(msg, {
    disable_notification: true,
    link_preview_options: { is_disabled: true },
  });

  botStatsManager.commandUse(`—Å—Ç–∞—Ç–∞ ${rawCmdDateRange}`);
  if (ctx.chat.id === -1001898242958) {
    ctx.reply(
      `DB: ${new Big(queryTime).minus(start).div(1000000)}ms\nGen: ${new Big(msgTime)
        .minus(queryTime)
        .div(1000000)}ms\nTotal: ${new Big(msgTime).minus(start).div(1000000)}ms`
    );
  }
}

export default stats_chat;
